apiVersion: shipwright.io/v1beta1
kind: ClusterBuildStrategy
metadata:
  name: buildpacks
spec:
  volumes:
    - name: certificate-registry
      configMap:
        name: certificate-registry
    - name: platform-env
      emptyDir: {}
    - name: layers-dir
      emptyDir: {}
    - name: empty-dir
      emptyDir: {}
    - name: cache-dir
      persistentVolumeClaim:
        claimName: ws-pvc
  parameters:
    - name: certificate-path
      description: Path to self signed certificate(s)
      default: "/selfsigned-certificates"
    - name: CNB_PLATFORM_API
      description: Platform API Version supported
      default: ""
    - name: CNB_BUILDER_IMAGE
      description: Builder image containing the buildpacks
      default: ""
    - name: CNB_LIFECYCLE_IMAGE
      description: The image to use when executing Lifecycle phases.
      default: ""
    - name: APP_IMAGE
      description: The name of where to store the app image.
    - name: RUN_IMAGE
      description: Reference to a run image to use.
      default: ""
    - name: CACHE_IMAGE
      description: The name of the persistent app cache image (if no cache workspace is provided).
      default: ""
    - name: CACHE_DIR_NAME
      description: Directory to cache files
      default: cache
    - name: PROCESS_TYPE
      description: The default process type to set on the image.
      default: ""
    - name: SOURCE_SUBPATH
      description: A subpath within the `source` input where the source to build is located.
      default: ""
    - name: ENV_VARS
      type: array
      description: Environment variables to set during _build-time_.
      defaults: []
    - name: PLATFORM_DIR
      description: The name of the platform directory.
      default: empty-dir
    - # Update the user id to use new paketo builder image till we can use: https://github.com/shipwright-io/community/blob/main/ships/0036-runAs-for-supporting-steps.md
      name: USER_ID
      description: The user ID of the builder image user.
      default: "1000"
    - name: GROUP_ID
      description: The group ID of the builder image user.
      default: "1000"
    - name: USER_HOME
      description: Absolute path to the user's home directory.
      default: /tekton/home
    - # TODO: Should be defined using ENV_VARS. To be reviewed
      name: BP_NATIVE_IMAGE
      description: Whether to build a native image from the application. Defaults to false.
      default: "false"
    - # TODO: Should be defined using ENV_VARS. To be reviewed
      name: BP_MAVEN_BUILT_ARTIFACT
      description: Configure the built application artifact explicitly. Supersedes $BP_MAVEN_BUILT_MODULE Defaults to target/*.[ejw]ar. Can match a single file, multiple files or a directory. Can be one or more space separated patterns.
      default: "target/*.[ejw]ar"
    - # TODO: Should be defined using ENV_VARS. To be reviewed
      name: BP_MAVEN_BUILD_ARGUMENTS
      description: Configure the arguments to pass to Maven. Defaults to -Dmaven.test.skip=true --no-transfer-progress package. --batch-mode will be prepended to the argument list in environments without a TTY.
      default: "-Dmaven.test.skip=true --no-transfer-progress package"
  buildSteps:
    - name: prepare
      image: docker.io/library/bash:5.1.4
      args:
        - -c
        - |
          set -e

          # TODO: To be reviewed
          echo "> Creating the cache directory if it is not empty"
          if [ ! -d "$DIRECTORY" ]; then
            echo "> Creating cache: /layers/$(params.CACHE_DIR_NAME)"
            mkdir -p /layers/$(params.CACHE_DIR_NAME)
            chown -R "$(params.USER_ID):$(params.GROUP_ID)" /layers/$(params.CACHE_DIR_NAME)
          fi
          
          # TODO: To be reviewed as shipwright don't support like Tekton workspaces
          #if [[ "$(workspaces.cache.bound)" == "true" ]]; then
          #  echo "> Setting permissions on '$(workspaces.cache.path)'..."
          #  chown -R "$(params.USER_ID):$(params.GROUP_ID)" "$(workspaces.cache.path)"
          #fi

          for path in "/tekton/home" "/layers" "$(workspaces.source.path)"; do
            echo "> Setting permissions on '$path'..."
            chown -R "$(params.USER_ID):$(params.GROUP_ID)" "$path"
          done

          echo "> Parsing additional configuration..."
          parsing_flag=""
          envs=()
          for arg in "$@"; do
              if [[ "$arg" == "--env-vars" ]]; then
                  echo "-> Parsing env variables..."
                  parsing_flag="env-vars"
              elif [[ "$parsing_flag" == "env-vars" ]]; then
                  envs+=("$arg")
              fi
          done

          echo "> Processing any environment variables..."
          ENV_DIR="/platform/env"

          echo "--> Creating 'env' directory: $ENV_DIR"
          mkdir -p "$ENV_DIR"

          for env in "${envs[@]}"; do
              IFS='=' read -r key value string <<< "$env"
              if [[ "$key" != "" && "$value" != "" ]]; then
                  path="${ENV_DIR}/${key}"
                  echo "--> Writing ${path}..."
                  echo -n "$value" > "$path"
              fi
          done
        # That's the separator between the shell script and its args
        - --
        - --env-vars
        - $(params.ENV_VARS[*])
      volumeMounts:
        - name: layers-dir
          mountPath: /layers
        - name: empty-dir #name: --> DON'T WORK : $(params.PLATFORM_DIR)
          mountPath: /platform
        - name: cache-dir #name: --> DON'T WORK : $(params.CACHE_DIR_NAME)
          mountPath: /tmp/cache
    - name: analyze
      image: $(params.CNB_LIFECYCLE_IMAGE)
      command: ["/cnb/lifecycle/analyzer"]
      args:
        - "-layers=/layers"
        - "-run-image=$(params.RUN_IMAGE)"
        - "-cache-image=$(params.CACHE_IMAGE)"
        - "-uid=$(params.USER_ID)"
        - "-gid=$(params.GROUP_ID)"
        - "$(params.APP_IMAGE)"
      env:
        - name: CNB_PLATFORM_API
          value: $(params.CNB_PLATFORM_API)
      volumeMounts:
        - name: layers-dir
          mountPath: /layers

    - name: detect
      image: $(params.CNB_BUILDER_IMAGE)
      imagePullPolicy: Always
      command: [ "/cnb/lifecycle/detector" ]
      args:
        - "-app=$(workspaces.source.path)/$(params.SOURCE_SUBPATH)"
        - "-group=/layers/group.toml"
        - "-plan=/layers/plan.toml"
        - "-platform=$(params.PLATFORM_DIR)"
      env:
        - name: CNB_PLATFORM_API
          value: $(params.CNB_PLATFORM_API)
      volumeMounts:
        - name: layers-dir
          mountPath: /layers
        - name: empty-dir # Hard coded the name as substitution do not work: $(params.PLATFORM_DIR)
          mountPath: /platform
        - name: empty-dir
          mountPath: /tekton/home

    - name: restore
      image: $(params.CNB_LIFECYCLE_IMAGE)
      imagePullPolicy: Always
      command: ["/cnb/lifecycle/restorer"]
      args:
        - "-group=/layers/group.toml"
        - "-layers=/layers"
        - "-cache-dir=/layers/$(params.CACHE_DIR_NAME)"
        - "-cache-image=$(params.CACHE_IMAGE)"
        - "-uid=$(params.USER_ID)"
        - "-gid=$(params.GROUP_ID)"
      env:
        - name: CNB_PLATFORM_API
          value: $(params.CNB_PLATFORM_API)
      volumeMounts:
        - name: layers-dir
          mountPath: /layers
        - name: cache-dir
          mountPath: /tmp/cache #name: --> DON'T WORK : $(params.CACHE_DIR_NAME)

    - name: build-and-push
      image: $(params.CNB_BUILDER_IMAGE)
      imagePullPolicy: Always
      securityContext:
        runAsUser: 1000 # Won't work : $(params.USER_ID) -> https://github.com/shipwright-io/build/issues/1354
        runAsGroup: 1000 # Won't work : $(params.GROUP_ID) -> https://github.com/shipwright-io/build/issues/1354
      command: ["/cnb/lifecycle/builder"]
      args:
        - "-app=$(workspaces.source.path)/$(params.SOURCE_SUBPATH)"
        - "-layers=/layers"
        - "-group=/layers/group.toml"
        - "-plan=/layers/plan.toml"
        - "-platform=$(params.PLATFORM_DIR)"
      env:
        - name: CNB_PLATFORM_API
          value: $(params.CNB_PLATFORM_API)
        # TODO: Can we retrieve the ENV VARs using Build.Spec.ParamsValues.ENV_VARs ?
        # instead of hard coding them here
        - name: BP_NATIVE_IMAGE
          value: $(params.BP_NATIVE_IMAGE)
        - name: BP_MAVEN_BUILT_ARTIFACT
          value: $(params.BP_MAVEN_BUILT_ARTIFACT)
        - name: BP_MAVEN_BUILD_ARGUMENTS
          value: $(params.BP_MAVEN_BUILD_ARGUMENTS)
      volumeMounts:
        - name: layers-dir
          mountPath: /layers
        - name: empty-dir # Hard coded the name as substitution do not work: $(params.PLATFORM_DIR)
          mountPath: /platform
        - name: empty-dir
          mountPath: /tekton/home
      resources:
        limits:
          cpu: 500m
          memory: 1Gi
        requests:
          cpu: 250m
          memory: 65Mi

    - name: export
      image: $(params.CNB_LIFECYCLE_IMAGE)
      imagePullPolicy: Always
      command: ["/cnb/lifecycle/exporter"]
      args:
        - "-app=$(workspaces.source.path)/$(params.SOURCE_SUBPATH)"
        - "-layers=/layers"
        - "-group=/layers/group.toml"
        - "-cache-dir=/layers/$(params.CACHE_DIR_NAME)"
        - "-cache-image=$(params.CACHE_IMAGE)"
        - "-report=/layers/report.toml"
        - "-process-type=$(params.PROCESS_TYPE)"
        - "-uid=$(params.USER_ID)"
        - "-gid=$(params.GROUP_ID)"
        - "-stack=/layers/stack.toml"
        - "$(params.APP_IMAGE)"
      env:
        - name: CNB_PLATFORM_API
          value: $(params.CNB_PLATFORM_API)
      volumeMounts:
        - name: layers-dir
          mountPath: /layers
        - name: cache-dir
          mountPath: /tmp/cache #name: --> DON'T WORK : $(params.CACHE_DIR_NAME)
        - mountPath: /selfsigned-certificates
          name: certificate-registry
          readOnly: true

    - name: results
      image: docker.io/library/bash:5.1.4
      args:
        - -c
        - |
          set -e
          cat /layers/report.toml | grep "digest" | cut -d'"' -f2 | cut -d'"' -f2 | tr -d '\n' > $(results.shp-image-digest.path)
      volumeMounts:
        - name: layers-dir
          mountPath: /layers