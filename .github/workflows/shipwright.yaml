name: "Test using Shipwright"
on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main
    paths-ignore:
      - '*.adoc'        # Ignores .adoc files at the root of the repository
      - '*.md'          # Ignores .md files at the root of the repository
      - '**/*.md'       # Ignores .md files within subdirectories

env:
  IDPCLUSTER_NAME: idplatform

jobs:
  configure-matrix:
    uses: ./.github/workflows/configure.yaml

  linux-shipwright-build:
    name: Linux - Shipwright build
    needs: configure-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.configure-matrix.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v3
      - name: Install JDK ${{ matrix.java }}
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java }}
          check-latest: true

      - name: Install idpbuilder
        run: |
          version=${{ matrix.idpbuilder_version }}
          curl -L -o ./idpbuilder.tar.gz "https://github.com/cnoe-io/idpbuilder/releases/download/${version}/idpbuilder-$(uname | awk '{print tolower($0)}')-$(uname -m | sed 's/x86_64/amd64/').tar.gz"
          tar xzf idpbuilder.tar.gz
          sudo mv ./idpbuilder /usr/local/bin/
          idpbuilder version

      - name: Create an IDP cluster and install the tekton package
        run: |
          PACKAGES_DIR=$(pwd)/.github/idp
          idpbuilder create \
            --name $IDPCLUSTER_NAME \
            --dev-password \
            -p $PACKAGES_DIR/tekton

      - name: Setup Shipwright
        run: |
          kubectl create -f https://github.com/shipwright-io/build/releases/download/${{ matrix.shipwright-version }}/release.yaml
          kubectl wait deployment -n shipwright-build shipwright-build-controller --for condition=Available=True --timeout=120s

          curl --silent --location https://raw.githubusercontent.com/shipwright-io/build/${{ matrix.shipwright-version }}/hack/setup-webhook-cert.sh | bash
          kubectl wait deployment -n shipwright-build shipwright-build-webhook --for condition=Available=True --timeout=120s

      - name: Test Quarkus Getting Started using ${{ matrix.builder-image }}
        run: |
          CONTAINER_NAME=quarkus-shipwright-hello
          CONTAINER_IMAGE=my-gitea-http.gitea.svc.cluster.local:3000/giteaadmin/$CONTAINER_NAME:1.0
          QUARKUS_VERSION=${{ matrix.quarkus_version }}
          CNB_BUILDER_IMAGE=${{ matrix.builder-image }}

          kubectl get secret -n default idpbuilder-cert -ojson | jq -r '.data."ca.crt"' | base64 -d > ca.cert
          kubectl create configmap certificate-registry --from-file=ca.cert

          kubectl apply -f $GITHUB_WORKSPACE/k8s/shipwright/secret-dockercfg.yml
          kubectl apply -f $GITHUB_WORKSPACE/k8s/shipwright/sa.yml
          kubectl apply -f $GITHUB_WORKSPACE/k8s/shipwright/pvc.yml
          kubectl apply -f $GITHUB_WORKSPACE/k8s/shipwright/clusterbuildstrategy.yml

          cat<<EOF | kubectl apply -f -
          apiVersion: shipwright.io/v1beta1
          kind: Build
          metadata:
            name: buildpack-quarkus-build
          spec:
            source:
              type: Git
              git:
                url: https://github.com/quarkusio/quarkus-quickstarts
                revision: "${QUARKUS_VERSION}"
              contextDir: getting-started
            paramValues:
              - name: SOURCE_SUBPATH
                value: getting-started
              - name: CNB_PLATFORM_API
                value: "0.13"
              - name: CNB_BUILDER_IMAGE
                value: ${CNB_BUILDER_IMAGE}
              - name: CNB_LIFECYCLE_IMAGE
                value: buildpacksio/lifecycle:0.20.9
              - name: CNB_LOG_LEVEL
                value: "info"
              - name: CNB_USER_ID
                value: "1002"
              - name: CNB_GROUP_ID
                value: "1000"
              - name: CNB_INSECURE_REGISTRIES
                value: my-gitea-http.gitea.svc.cluster.local:3000 
              - name: CNB_RUN_IMAGE
                value: paketobuildpacks/run-ubi8-base:0.0.114
              - name: CNB_BUILD_IMAGE
                value: paketobuildpacks/build-ubi8-base:0.0.114
              - name: APP_IMAGE
                value: ${CONTAINER_IMAGE}
              - name: PROCESS_TYPE
                value: ""
              - name: ENV_VARS
                values:
                  - value: BP_JVM_VERSION=21
            strategy:
              name: buildpacks
              kind: ClusterBuildStrategy
            output:
              image: $CONTAINER_IMAGE
          EOF
          kubectl create -f $GITHUB_WORKSPACE/k8s/shipwright/buildrun.yml

          # Wait for the build
          BUILDRUN_NAME=$(kubectl get buildrun -lbuild.shipwright.io/name=buildpack-quarkus-build -oname)
          kubectl wait --for=condition=Succeeded --timeout=300s $BUILDRUN_NAME

          # Test application
          .github/testGreetingApplication.sh $CONTAINER_NAME gitea.cnoe.localtest.me:8443/giteaadmin/$CONTAINER_NAME:1.0

      - name: Print resources no matter if it fails or success
        if: failure() || success()
        run: |
          echo "Build resource(s)"
          BUILD_NAME=buildpack-quarkus-build
          kubectl describe build $BUILD_NAME

          echo "BuildRun resource(s)"
          kubectl get buildrun -A

          echo "BuildRun describe resource"
          BUILDRUN_NAME=$(kubectl get buildrun -lbuild.shipwright.io/name=buildpack-quarkus-build -oname)
          kubectl describe $BUILDRUN_NAME

      - name: Print Log of the buildrun
        if: failure()
        run: |
          POD_NAME=$(kubectl get pod -lbuild.shipwright.io/name=buildpack-quarkus-build -oname)
          kubectl logs $POD_NAME --all-containers
