name: "Test using Shipwright"
on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main
    paths-ignore:
      - '*.adoc'        # Ignores .adoc files at the root of the repository
      - '*.md'          # Ignores .md files at the root of the repository
      - '**/*.md'       # Ignores .md files within subdirectories
jobs:
  configure-matrix:
    uses: ./.github/workflows/configure.yaml

  linux-shipwright-build:
    name: Linux - Shipwright build
    needs: configure-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.configure-matrix.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v3
      - name: Install JDK ${{ matrix.java }}
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java }}
          check-latest: true

      - name: Setup Kind with Registry
        run: |
          curl -s -L "https://raw.githubusercontent.com/snowdrop/k8s-infra/${{ matrix.kind_sha_commit }}/kind/kind.sh" | bash -s install
          curl -s -L "https://raw.githubusercontent.com/snowdrop/k8s-infra/${{ matrix.kind_sha_commit }}/kind/registry.sh" | bash -s install --registry-name kind-registry.local

      - name: Setup Tekton & Shipwright
        run: |
          kubectl create -f https://github.com/tektoncd/pipeline/releases/download/${{ matrix.tekton-version }}/release.yaml
          kubectl wait deployment -n tekton-pipelines tekton-pipelines-controller --for condition=Available=True --timeout=120s
          kubectl wait deployment -n tekton-pipelines tekton-pipelines-webhook --for condition=Available=True --timeout=120s
          
          kubectl create -f https://github.com/shipwright-io/build/releases/download/${{ matrix.shipwright-version }}/release.yaml
          kubectl wait deployment -n shipwright-build shipwright-build-controller --for condition=Available=True --timeout=120s

      - name: Test Quarkus Getting Started using ${{ matrix.builder-image }}
        run: |
          CONTAINER_NAME=quarkus-shipwright-hello
          CONTAINER_IMAGE=kind-registry.local:5000/$CONTAINER_NAME:1.0
          
          kubectl create -f ./k8s/shipwright/unsecured/pvc.yml
          kubectl create -f ./k8s/shipwright/unsecured/clusterbuildstrategy.yml
          
          cat<<EOF | kubectl apply -f -
          apiVersion: shipwright.io/v1alpha1
          kind: Build
          metadata:
            name: buildpack-quarkus-build
          spec:
            source:
              url: https://github.com/quarkusio/quarkus-quickstarts
              contextDir: getting-started
            paramValues:
              - name: SOURCE_SUBPATH
                value: getting-started
              - name: CNB_LOG_LEVEL
                value: "info"
              - name: CNB_PLATFORM_API
                value: "0.13"
              - name: CNB_EXPERIMENTAL_MODE
                value: warn
              #- name: CNB_USER_ID
              #  value: "1000"
              #- name: CNB_GROUP_ID
              #  value: "1000"
              - name: CNB_BUILDER_IMAGE
                value: paketocommunity/builder-ubi-base:0.0.54
              - name: CNB_LIFECYCLE_IMAGE
                value: buildpacksio/lifecycle:0.19.3
              - name: RUN_IMAGE
                value: paketobuildpacks/run-jammy-tiny:latest
              - name: APP_IMAGE
                value: ${CONTAINER_IMAGE}
              - name: PROCESS_TYPE
                value: ""
              - name: ENV_VARS
                values:
                  - value: BP_NATIVE_IMAGE=false
            strategy:
              name: buildpacks
              kind: ClusterBuildStrategy
            output:
              image: $CONTAINER_IMAGE
          EOF
          kubectl create -f ./k8s/shipwright/unsecured/buildrun.yml
          
          # Wait for the build
          BUILDRUN_NAME=$(kubectl get buildrun -lbuild.shipwright.io/name=buildpack-quarkus-build -oname)
          kubectl wait --for=condition=Succeeded --timeout=600s $BUILDRUN_NAME

          # Test application
          .github/testGreetingApplication.sh $CONTAINER_NAME localhost:5000/$CONTAINER_NAME:1.0

      - name: Print Taskrun's Pod logs no matter if it fails or success
        if: failure() || success()
        run: |
          BUILDRUN_NAME=$(kubectl get buildrun -lbuild.shipwright.io/name=buildpack-quarkus-build -oname)
          kubectl describe $BUILDRUN_NAME
          
          POD_NAME=$(kubectl get pod -lbuild.shipwright.io/name=buildpack-quarkus-build -oname)
          kubectl logs $POD_NAME --all-containers
