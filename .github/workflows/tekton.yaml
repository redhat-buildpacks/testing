name: "Test using Tekton"
on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main
    paths-ignore:
      - '*.adoc'        # Ignores .adoc files at the root of the repository
      - '*.md'          # Ignores .md files at the root of the repository
      - '**/*.md'       # Ignores .md files within subdirectories
env:
  IDPCLUSTER_NAME: idplatform
  CONTAINER_NAME: quarkus-tekton-hello
  CONTAINER_IMAGE: my-gitea-http.gitea.svc.cluster.local:3000/giteaadmin/quarkus-tekton-hello:1.0

jobs:
  configure-matrix:
    uses: ./.github/workflows/configure.yaml

  linux-tekton-build:
    name: Linux - Tekton build
    needs: configure-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.configure-matrix.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v3
      - name: Install JDK ${{ matrix.java }}
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java }}
          check-latest: true

      - name: Install idpbuilder
        run: |
          version=${{ matrix.idpbuilder_version }}
          curl -L -o ./idpbuilder.tar.gz "https://github.com/cnoe-io/idpbuilder/releases/download/${version}/idpbuilder-$(uname | awk '{print tolower($0)}')-$(uname -m | sed 's/x86_64/amd64/').tar.gz"
          tar xzf idpbuilder.tar.gz
          sudo mv ./idpbuilder /usr/local/bin/
          idpbuilder version

      - name: Create an IDP cluster and install the tekton package
        run: |
          PACKAGES_DIR=$(pwd)/.github/idp
          idpbuilder create \
            --name $IDPCLUSTER_NAME \
            --dev-password \
            -p $PACKAGES_DIR/tekton

          idpbuilder version
          
          kubectl rollout status -n argocd deployment argocd-server --timeout=90s
          kubectl rollout status -n gitea deployment  my-gitea      --timeout=90s

      - name: Install the tekton client
        run: |
          curl -sLO  https://github.com/tektoncd/cli/releases/download/v${{ matrix.tekton-client-version }}/tektoncd-cli-${{ matrix.tekton-client-version }}_Linux-64bit.deb
          sudo dpkg -i ./tektoncd-cli-${{ matrix.tekton-client-version }}_Linux-64bit.deb
          tkn version

      - name: Deploy the resources needed for tekton
        run: |
          kubectl rollout status deployment tekton-pipelines-controller -n tekton-pipelines --timeout=90s
          kubectl rollout status deployment tekton-pipelines-webhook -n tekton-pipelines --timeout=90s
          kubectl rollout status deployment tekton-events-controller -n tekton-pipelines --timeout=90s
          #kubectl rollout status deployment tekton-pipelines-remote-resolvers -n tekton-pipelines-resolvers --timeout=90s

          kubectl apply -f https://raw.githubusercontent.com/tektoncd/catalog/main/task/git-clone/0.9/git-clone.yaml
          kubectl apply -f https://raw.githubusercontent.com/redhat-buildpacks/catalog/main/tekton/task/buildpacks-phases/01/buildpacks-phases.yaml
          kubectl apply -f https://raw.githubusercontent.com/redhat-buildpacks/catalog/main/tekton/task/buildpacks-extension-phases/01/buildpacks-extension-phases.yaml
          kubectl apply -f $GITHUB_WORKSPACE/k8s/tekton/secret-dockercfg.yml
          kubectl apply -f $GITHUB_WORKSPACE/k8s/tekton/sa-with-reg-creds.yml
          kubectl apply -f $GITHUB_WORKSPACE/k8s/tekton/ws-pvc.yml

      - name: Test Quarkus Getting Started using ${{ matrix.builder-image }}
        run: |
          cat <<EOF | kubectl apply -f -
          ---
          apiVersion: tekton.dev/v1
          kind: PipelineRun
          metadata:
            name: buildpacks
          spec:
            taskRunTemplate:
              serviceAccountName: sa-with-creds
            params:
              - name: gitRepo
                value: https://github.com/quarkusio/quarkus-quickstarts.git
              - name: sourceSubPath
                value: getting-started
              - name: AppImage
                value: ${CONTAINER_IMAGE}
              - name: cnbBuilderImage
                value: ${{ matrix.builder-image }}
              - name: cnbBuildImage
                value: ${{ matrix.build-image }}
              - name: cnbRunImage
                value: ${{ matrix.run-image }}
              - name : cnbInsecureRegistries
                value: ${{ matrix.insecure-registries }}
              - name: cnbBuildEnvVars
                value:
                  - BP_JVM_VERSION=21
            workspaces:
            - name: creds-ws
              secret:
                secretName: dockercfg
            - name: source-ws
              subPath: source
              persistentVolumeClaim:
                claimName: ws-pvc
            - name: cache-ws
              subPath: cache
              persistentVolumeClaim:
                claimName: ws-pvc
            pipelineRef:
              resolver: git
              params:
                - name: url
                  value: https://github.com/redhat-buildpacks/catalog.git
                - name: revision
                  value: main
                - name: pathInRepo
                  value: tekton/pipeline/buildpacks/01/buildpacks.yaml
          EOF

      - name: Wait till pipelinerun finished the build ...
        run: |
          TIMEOUT=900   # in seconds
          INTERVAL=20   # polling interval in seconds
          ELAPSED=0
          NAMESPACE=default
          PIPELINERUN_NAME=buildpacks
          SUCCEEDED=false

          while [ "$ELAPSED" -lt "$TIMEOUT" ]; do
            STATUS=$(kubectl get pipelinerun "$PIPELINERUN_NAME" -n "$NAMESPACE" -o jsonpath="{.status.conditions[0].type}" 2>/dev/null)

            if [ "$STATUS" == "Succeeded" ]; then
              SUCCEEDED=true
            fi

            sleep "$INTERVAL"
            ELAPSED=$((ELAPSED + INTERVAL))
            echo "Elapsed: $ELAPSED - Timeout: $TIMEOUT"
          done

          if [ "$SUCCEEDED" = true ]; then
            echo "✅ PipelineRun '$PIPELINERUN_NAME' succeeded"
            tkn pipelinerun describe -n default buildpacks
          else
            echo "❌ PipelineRun '$PIPELINERUN_NAME' did not succeed within $TIMEOUT seconds"
            exit 1
          fi

          tkn pipelinerun describe -n default buildpacks

          #echo "#########################################"
          #echo "Show pods, pvc, secrets ..."
          #echo "#########################################"
          #kubectl get pods -A
          #kubectl get secrets
          #kubectl get pvc
          #
          #echo "#########################################"
          #echo "Describe: buildpacks-fetch-repository-pod"
          #echo "#########################################"
          #kubectl get pod buildpacks-fetch-repository-pod -oyaml
          #
          #echo "#########################################"
          #echo "Describe: buildpacks-buildpacks-extension-check-pod"
          #echo "#########################################"
          #kubectl get pod buildpacks-buildpacks-extension-check-pod -oyaml
          #
          #echo "#########################################"
          #echo "Describe: buildpacks pipelinerun"
          #echo "#########################################"
          #kubectl get pipelinerun/buildpacks
          #kubectl describe pipelinerun buildpacks
          #
          #echo "#########################################"
          #echo "Log Tekton controller"
          #echo "#########################################"
          #kubectl logs -n tekton-pipelines -l app.kubernetes.io/part-of=tekton-pipelines

      - name: Image built. We can test it
        run: |
          .github/testGreetingApplication.sh $CONTAINER_NAME gitea.cnoe.localtest.me:8443/giteaadmin/$CONTAINER_NAME:1.0

      - name: Describe pipelinerun
        if: success()
        run: |
          tkn pipelinerun describe

      - name: (Only if it failed) Print Pipeline Task logs
        if: failure()
        run: |
          echo "#########################################"
          echo "Show pods, pvc, secrets ..."
          echo "#########################################"
          kubectl get pods -A
          kubectl get pvc
          kubectl get secrets

          echo "#########################################"
          echo "Tekton ..."
          echo "#########################################"
          tkn pipelinerun describe
          tkn pipelinerun logs -n default buildpacks

          echo "#########################################"
          echo "Pods ..."
          echo "#########################################"

          POD_NAME=buildpacks-phases-fetch-repository-pod
          kubectl get pod $POD_NAME >/dev/null 2>&1 && kubectl logs $POD_NAME --all-containers --ignore-errors

          POD_NAME=buildpacks-phases-buildpacks-extension-check-pod
          kubectl get pod $POD_NAME >/dev/null 2>&1 && kubectl logs $POD_NAME --all-containers --ignore-errors

          POD_NAME=buildpacks-phases-buildpacks-extension-pod
          kubectl get pod $POD_NAME >/dev/null 2>&1 && kubectl logs $POD_NAME --all-containers --ignore-errors
