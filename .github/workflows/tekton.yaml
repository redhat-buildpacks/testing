name: "Test using Tekton"
on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main
    paths-ignore:
      - '*.adoc'        # Ignores .adoc files at the root of the repository
      - '*.md'          # Ignores .md files at the root of the repository
      - '**/*.md'       # Ignores .md files within subdirectories
jobs:
  configure-matrix:
    uses: ./.github/workflows/configure.yaml

  linux-tekton-build:
    name: Linux - Tekton build
    needs: configure-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.configure-matrix.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v3
      - name: Install JDK ${{ matrix.java }}
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java }}
          check-latest: true

      - name: Setup Kind with Registry
        run: |
          curl -s -L "https://raw.githubusercontent.com/snowdrop/k8s-infra/${{ matrix.kind_sha_commit }}/kind/kind.sh" | bash -s install
          curl -s -L "https://raw.githubusercontent.com/snowdrop/k8s-infra/${{ matrix.kind_sha_commit }}/kind/registry.sh" | bash -s install --registry-name kind-registry.local

      - name: Setup Tekton
        run: |
          kubectl apply -f https://github.com/tektoncd/pipeline/releases/download/${{ matrix.tekton-version }}/release.yaml
          kubectl wait deployment -n tekton-pipelines tekton-pipelines-controller --for condition=Available=True --timeout=90s
          kubectl wait deployment -n tekton-pipelines tekton-pipelines-webhook --for condition=Available=True --timeout=90s
          
          # Patching needed on kind as we got an affinity error
          # when workspaces would like to use several PVC
          # See: https://github.com/tektoncd/pipeline/issues/3545
          kubectl patch configmap/feature-flags \
          -n tekton-pipelines \
          --type merge \
          -p '{"data":{"disable-affinity-assistant":"true"}}'
          
          kubectl apply -f https://raw.githubusercontent.com/tektoncd/catalog/main/task/git-clone/0.9/git-clone.yaml
          
          wget https://github.com/tektoncd/cli/releases/download/v${{ matrix.tekton-client-version }}/tektoncd-cli-${{ matrix.tekton-client-version }}_Linux-64bit.rpm
          sudo rpm -Uvh tektoncd-cli-${{ matrix.tekton-client-version }}_Linux-64bit.rpm

      - name: Test Quarkus Getting Started using ${{ matrix.builder-image }}
        run: |
          CONTAINER_NAME=quarkus-tekton-hello
          CONTAINER_IMAGE=kind-registry.local:5000/$CONTAINER_NAME:1.0

          kubectl apply -f https://raw.githubusercontent.com/redhat-buildpacks/catalog/main/tekton/task/buildpacks-phases/01/buildpacks-phases.yaml
          kubectl apply -f https://raw.githubusercontent.com/redhat-buildpacks/catalog/main/tekton/task/buildpacks-extension-phases/01/buildpacks-extension-phases.yaml
          
          cat <<EOF | kubectl apply -f -
          ---
          apiVersion: tekton.dev/v1beta1
          kind: PipelineRun
          metadata:
            name: buildpacks
          spec:
            params:
              - name: gitRepo
                value: https://github.com/quarkusio/quarkus-quickstarts.git
              - name: sourceSubPath
                value: getting-started
              - name: AppImage
                value: ${CONTAINER_IMAGE}
              - name: cnbBuilderImage
                value: ${{ matrix.builder-image }}
              - name: cnbBuildImage
                value: ${{ matrix.build-image }}
              - name: cnbRunImage
                value: ${{ matrix.run-image }}
              - name: cnbBuildEnvVars
                value:
                  - "BP_NATIVE_IMAGE=false"
                  - "BP_MAVEN_BUILT_ARTIFACT=target/quarkus-app/lib/ target/quarkus-app/*.jar target/quarkus-app/app/ target/quarkus-app/quarkus/"
                  - "BP_MAVEN_BUILD_ARGUMENTS=package -DskipTests=true -Dmaven.javadoc.skip=true -Dquarkus.package.type=fast-jar"
            workspaces:
              - name: source-ws
                subPath: source
                volumeClaimTemplate:
                  spec:
                    accessModes:
                      - ReadWriteOnce
                    resources:
                      requests:
                        storage: 1Gi
              - name: cache-ws
                subPath: cache
                volumeClaimTemplate:
                  spec:
                    accessModes:
                      - ReadWriteOnce
                    resources:
                      requests:
                        storage: 1Gi
            pipelineRef:
              resolver: git
              params:
                - name: url
                  value: https://github.com/redhat-buildpacks/catalog.git
                - name: revision
                  value: main
                - name: pathInRepo
                  value: tekton/pipeline/buildpacks/01/buildpacks.yaml
          EOF
          
          # Wait for the build
          kubectl wait --for=condition=Succeeded --timeout=600s PipelineRun/buildpacks

          # Test application
          .github/testGreetingApplication.sh $CONTAINER_NAME localhost:5000/$CONTAINER_NAME:1.0
      - name: Log the execution of the pipelinerun
        if: success()
        run: |
          tkn pipelinerun logs buildpacks
      - name: (Only if it failed) Print Pipeline Task logs
        if: failure()
        run: |
          tkn pipelinerun logs buildpacks
          #kubectl logs buildpacks-buildpacks-pod --all-containers --ignore-errors